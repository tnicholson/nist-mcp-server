# .gitignore
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# macOS
.DS_Store

# Downloaded NIST data (will be regenerated)
data/nist-sources/
data/oscal-schemas/

# Keep examples and structure
!data/examples/
!data/README.md

---

# requirements.txt
mcp>=0.5.0
jsonschema>=4.0.0
lxml>=4.9.0
requests>=2.28.0
pydantic>=2.0.0
click>=8.0.0
rich>=12.0.0
aiohttp>=3.8.0
aiofiles>=23.0.0

# Development dependencies
pytest>=7.0.0
pytest-asyncio>=0.21.0
black>=22.0.0
isort>=5.0.0
mypy>=1.0.0
pre-commit>=2.20.0
coverage>=7.0.0

---

# setup.py (for backward compatibility)
from setuptools import setup, find_packages

setup(
    name="nist-mcp",
    use_scm_version=True,
    setup_requires=["setuptools_scm"],
    packages=find_packages(where="src"),
    package_dir={"": "src"},
)

---

# Makefile
.PHONY: install dev-install test lint format clean download-data help

help:  ## Show this help message
	@echo "Available commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'

install:  ## Install package
	pip install -e .

dev-install:  ## Install development dependencies
	pip install -e ".[dev]"
	pre-commit install

download-data:  ## Download NIST data sources
	python scripts/download_nist_data.py --verbose

update-data:  ## Force update all NIST data
	python scripts/download_nist_data.py --force --verbose

test:  ## Run tests
	pytest

test-cov:  ## Run tests with coverage
	pytest --cov=nist_mcp --cov-report=html --cov-report=term

lint:  ## Run linting
	mypy src/
	black --check src/ tests/
	isort --check src/ tests/

format:  ## Format code
	black src/ tests/
	isort src/ tests/

clean:  ## Clean build artifacts
	rm -rf build/
	rm -rf dist/
	rm -rf *.egg-info/
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete

docker-build:  ## Build Docker image
	docker build -t nist-mcp -f docker/Dockerfile .

docker-run:  ## Run Docker container
	docker run -it nist-mcp

---

# docker/Dockerfile
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    libxml2-dev \
    libxslt-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy source code
COPY src/ ./src/
COPY pyproject.toml .
COPY setup.py .

# Install package
RUN pip install -e .

# Create data directory
RUN mkdir -p /app/data

# Download NIST data
COPY scripts/download_nist_data.py ./scripts/
RUN python scripts/download_nist_data.py --data-path /app/data

# Expose MCP server
EXPOSE 8000

# Run server
CMD ["nist-mcp"]

---

# docker/docker-compose.yml
version: '3.8'

services:
  nist-mcp:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - nist_data:/app/data
    environment:
      - PYTHONPATH=/app/src
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import nist_mcp; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  nist_data: