name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Run linting
      run: |
        ruff check src/ tests/ scripts/ --output-format=github
      continue-on-error: true

    - name: Run formatting check
      run: |
        ruff format --check src/ tests/ scripts/
      continue-on-error: true

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true

    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short
      continue-on-error: true

    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium
      continue-on-error: true

    - name: Test server initialization
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from nist_mcp.server import NISTMCPServer
        server = NISTMCPServer()
        print('âœ… Server initialization successful')
        "

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install build dependencies
      run: |
        uv tool install build

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        uv tool install twine
        twine check dist/*
