{
  "timestamp": 1759792005.140091,
  "total_categories": 5,
  "results": {
    "Code Quality": [
      {
        "test": "Ruff Linting",
        "passed": false,
        "stdout": "E501 Line too long (89 > 88)\n   --> scripts/download_nist_data.py:119:89\n    |\n117 |             logger.info(f\"Downloading {source_info['description']}...\")\n118 |\n119 |             # SECURITY: Only allow HTTPS URLs from trusted NIST domains for data download\n    |                                                                                         ^\n120 |             with urllib.request.urlopen(\n121 |                 url\n    |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> scripts/download_nist_data.py:120:18\n    |\n119 |               # SECURITY: Only allow HTTPS URLs from trusted NIST domains for data download\n120 |               with urllib.request.urlopen(\n    |  __________________^\n121 | |                 url\n122 | |             ) as response:  # noqa: S310 - Trusted URLs only\n    | |_____________^\n123 |                   content = response.read().decode(\"utf-8\")\n    |\n\nRUF100 [*] Unused `noqa` directive (unused:",
        "stderr": ""
      },
      {
        "test": "Ruff Format Check",
        "passed": false,
        "stdout": "Would reformat: scripts/download_nist_data.py\nWould reformat: tests/test_mcp_integration.py\nWould reformat: tests/test_security.py\n3 files would be reformatted, 15 files already formatted\n",
        "stderr": ""
      },
      {
        "test": "Type Checking",
        "passed": false,
        "stdout": "src/nist_mcp/analysis_tools.py:145: error: Unused \"type: ignore\" comment  [unused-ignore]\nsrc/nist_mcp/data/loader.py:244: error: Returning Any from function declared to return \"dict[str, Any] | None\"  [no-any-return]\nFound 2 errors in 2 files (checked 8 source files)\n",
        "stderr": ""
      },
      {
        "test": "Unit Tests",
        "passed": false,
        "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /Users/personal/nist-mcp-server/venv/bin/python3.13\ncachedir: .pytest_cache\nrootdir: /Users/personal/nist-mcp-server\nconfigfile: pyproject.toml\nplugins: asyncio-1.2.0, anyio-4.11.0\nasyncio: mode=Mode.AUTO, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 14 items\n\ntests/test_server.py::TestNISTMCPServer::test_server_initialization PASSED [  7%]\ntests/test_server.py::TestNISTMCPServer::test_server_initialization_custom_path PASSED [ 14%]\ntests/test_server.py::TestNISTMCPServer::test_list_nist_controls_empty PASSED [ 21%]\ntests/test_server.py::TestNISTMCPServer::test_list_nist_controls_with_data PASSED [ 28%]\ntests/test_server.py::TestNISTMCPServer::test_get_control_details_found PASSED [ 35%]\ntests/test_server.py::TestNISTMCPServer::test_get_control_details_not_found PASSED ",
        "stderr": ""
      }
    ],
    "Security": [
      {
        "test": "Ruff Security Checks",
        "passed": false,
        "stdout": "S310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n   --> scripts/download_nist_data.py:120:18\n    |\n119 |               # SECURITY: Only allow HTTPS URLs from trusted NIST domains for data download\n120 |               with urllib.request.urlopen(\n    |  __________________^\n121 | |                 url\n122 | |             ) as response:  # noqa: S310 - Trusted URLs only\n    | |_____________^\n123 |                   content = response.read().decode(\"utf-8\")\n    |\n\nS602 `subprocess` call with `shell=True` identified, security issue\n  --> scripts/run_tests.py:22:18\n   |\n20 |     try:\n21 |         start_time = time.time()\n22 |         result = subprocess.run(\n   |                  ^^^^^^^^^^^^^^\n23 |             cmd,\n24 |             shell=True,\n   |\n\nS310 Audit URL open for permitted schemes. Allowing use of `file:` or custom schemes is often unexpected.\n  --> scripts/validate_urls.py:25:15\n   |\n24 |           # Create request with pro",
        "stderr": ""
      },
      {
        "test": "Bandit Security Scan",
        "passed": false,
        "stdout": "",
        "stderr": "/bin/sh: bandit: command not found\n"
      },
      {
        "test": "Safety Dependency Check",
        "passed": false,
        "stdout": "",
        "stderr": "/bin/sh: safety: command not found\n"
      },
      {
        "test": "Security Unit Tests",
        "passed": false,
        "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /Users/personal/nist-mcp-server/venv/bin/python3.13\ncachedir: .pytest_cache\nrootdir: /Users/personal/nist-mcp-server\nconfigfile: pyproject.toml\nplugins: asyncio-1.2.0, anyio-4.11.0\nasyncio: mode=Mode.AUTO, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 14 items\n\ntests/test_security.py::TestInputValidation::test_control_id_injection_protection PASSED [  7%]\ntests/test_security.py::TestInputValidation::test_path_traversal_protection PASSED [ 14%]\ntests/test_security.py::TestInputValidation::test_json_parsing_security PASSED [ 21%]\ntests/test_security.py::TestInputValidation::test_file_access_restrictions FAILED [ 28%]\ntests/test_security.py::TestDataIntegrity::test_json_schema_validation PASSED [ 35%]\ntests/test_security.py::TestDataIntegrity::test_xml_parsing_security PASS",
        "stderr": ""
      }
    ],
    "Integration": [
      {
        "test": "MCP Integration Tests",
        "passed": false,
        "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /Users/personal/nist-mcp-server/venv/bin/python3.13\ncachedir: .pytest_cache\nrootdir: /Users/personal/nist-mcp-server\nconfigfile: pyproject.toml\nplugins: asyncio-1.2.0, anyio-4.11.0\nasyncio: mode=Mode.AUTO, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 14 items\n\ntests/test_mcp_integration.py::TestMCPIntegration::test_mcp_app_creation PASSED [  7%]\ntests/test_mcp_integration.py::TestMCPIntegration::test_server_lifespan PASSED [ 14%]\ntests/test_mcp_integration.py::TestMCPIntegration::test_list_controls_tool PASSED [ 21%]\ntests/test_mcp_integration.py::TestMCPIntegration::test_get_control_tool PASSED [ 28%]\ntests/test_mcp_integration.py::TestMCPIntegration::test_get_control_tool_not_found PASSED [ 35%]\ntests/test_mcp_integration.py::TestMCPIntegration::test_mcp_tool_decorato",
        "stderr": ""
      },
      {
        "test": "Server Initialization Test",
        "passed": true,
        "stdout": "",
        "stderr": "[10/06/25 16:06:41] INFO     NIST MCP Server initialized with data path: /Users/personal/nist-mcp-server/data                             server.py:25\n"
      }
    ],
    "Performance": [
      {
        "test": "Performance Tests",
        "passed": false,
        "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /Users/personal/nist-mcp-server/venv/bin/python3.13\ncachedir: .pytest_cache\nrootdir: /Users/personal/nist-mcp-server\nconfigfile: pyproject.toml\nplugins: asyncio-1.2.0, anyio-4.11.0\nasyncio: mode=Mode.AUTO, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 9 items\n\ntests/test_performance.py::TestPerformance::test_control_loading_performance PASSED [ 11%]\ntests/test_performance.py::TestPerformance::test_concurrent_control_requests PASSED [ 22%]\ntests/test_performance.py::TestPerformance::test_memory_usage_with_large_dataset PASSED [ 33%]\ntests/test_performance.py::TestPerformance::test_caching_performance PASSED [ 44%]\ntests/test_performance.py::TestLoadTesting::test_rapid_sequential_requests PASSED [ 55%]\ntests/test_performance.py::TestLoadTesting::test_mixed_operation_load P",
        "stderr": ""
      }
    ],
    "Coverage": [
      {
        "test": "Coverage Tests",
        "passed": false,
        "stdout": "",
        "stderr": "ERROR: usage: pytest [options] [file_or_dir] [file_or_dir] [...]\npytest: error: unrecognized arguments: --cov=src/nist_mcp --cov-report=term-missing --cov-report=xml --cov-fail-under=70\n  inifile: /Users/personal/nist-mcp-server/pyproject.toml\n  rootdir: /Users/personal/nist-mcp-server\n\n"
      }
    ]
  }
}